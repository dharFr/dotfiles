# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd "$@"
}

#Start an HTTP server from a directory, optionally specifying the port
function server {
  local port="${1:-8000}"
  open "http://localhost:${port}/"
  python -m SimpleHTTPServer "$port"
}

# grailsenv - Dynamically switch your GRAILS_HOME 
# grailsenv [VERSION]
# Try to switch your GRAILS_HOME property to 'grails-VERSION' 
# according to the current value
# 
# if a 'grails-VERSION' directory exists in the same folder, 
# exports a new GRAILS_HOME and add it to the PATH
# 
# Without parameters, displays the current GRAILS_HOME value
function grailsenv {

    local __grails_parent=`dirname $GRAILS_HOME`
    local __version

    echo "Old: GRAILS_HOME=$GRAILS_HOME"

    # without arguments, log available grails folders 
    # or check for application.properties file
    if [ -v $1 ]; then
        if [ -f 'application.properties' ]; then
          echo "> reading grails version from application.properties file..."
          __version=`awk -F= '/app.grails.version/ {print $2}' application.properties`
        else
          echo ""
          echo "Available versions: "
          ls "$__grails_parent/" | grep grails
        fi
    elif [ -e "$__grails_parent/grails-$1" ]; then
       __version=$1
    else
        echo "$__grails_parent/grails-$1 doesn't exist... "
        ls "$__grails_parent/" | grep grails
    fi

    if [ ! -v $__version ]; then
      export GRAILS_HOME="$__grails_parent/grails-$__version"
      export PATH=$GRAILS_HOME/bin:$PATH
      echo "New: GRAILS_HOME=$GRAILS_HOME"
    fi
}

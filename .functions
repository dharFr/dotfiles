# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd "$@"
}

#Start an HTTP server from a directory, optionally specifying the port
function server {
  local port="${1:-8000}"
  open "http://localhost:${port}/"
  python -m SimpleHTTPServer "$port"
}

# grailsenv - Dynamically switch your GRAILS_HOME 
# grailsenv [VERSION]
# Try to switch your GRAILS_HOME property to 'grails-VERSION' 
# according to the current value
# 
# if a 'grails-VERSION' directory exists in the same folder, 
# exports a new GRAILS_HOME and add it to the PATH
# 
# Without parameters, displays the current GRAILS_HOME value
function grailsenv {

    local __grails_parent=`dirname $GRAILS_HOME`
    local __version

    echo "Old: GRAILS_HOME=$GRAILS_HOME"

    # without arguments, log available grails folders 
    # or check for application.properties file
    if [ -v $1 ]; then
        if [ -f 'application.properties' ]; then
          echo "> reading grails version from application.properties file..."
          __version=`awk -F= '/app.grails.version/ {print $2}' application.properties`
          echo "> found version $__version in application.properties"
        else
          echo ""
          echo "Available versions: "
          ls "$__grails_parent/" | grep grails
        fi
    elif [ -e "$__grails_parent/grails-$1" ]; then
       __version=$1
    else
        echo "$__grails_parent/grails-$1 doesn't exist... "
        ls "$__grails_parent/" | grep grails
    fi

    if [ ! -v $__version ]; then
      export GRAILS_HOME="$__grails_parent/grails-$__version"
      export PATH=$GRAILS_HOME/bin:$PATH
      echo "New: GRAILS_HOME=$GRAILS_HOME"
    fi
}


function grailsrun {

  gr_port="8080"
  gr_ip="localhost"
  gr_host=0

  usage() {
    echo "Launch 'grails run-app' with options."
    echo ""
    echo " -h | --help Display help"
    echo " -r | --remote-host Run 'grails run-app' with -Dserver.host={your-ip} option"
    echo " -p | --port Run 'grails run-app' with -Dserver.port={value}"
    echo ""
    echo "Example:"
    echo "> grailsrun -r -p 9090"
    echo "will run => grails -Dserver.host={your-ip} -Dserver.port=9090 run-app "
    echo ""
    echo "> grailsrun -p 8081"
    echo "will run => grails -Dserver.port=8081 run-app "
  }
  
  while [ "$1" != "" ]; do
    case $1 in
      -p | --port ) shift
                  gr_port=${1}
                  ;;
      -r | --remote-host ) gr_host=1
                  ;;
      -h | --help ) usage
                  exit 1
    esac
    shift
  done
   
  if [ $gr_host = 1 ]; then
    gr_ip="`ifconfig eth0 | grep inet\ addr:| awk {'print $2'} | sed s/.*://`"
  fi
   
  echo "| Launching: grails -Dserver.host=$gr_ip -Dserver.port=$gr_port run-app"
  echo ""
  grails -Dserver.host=$gr_ip -Dserver.port=$gr_port run-app 
}



# Apply svn sub-command to every newly created file (marked with ? in 'svn status')
# Example : 
# 
# Add every new file
# > svn-allnew add
# 
# Still works with extra parameters
# > svn-allnew add --force
function svn-allnew {
  if [ -z $1 ]; then
    echo "Please add an svn-subcommand as a parameter (try 'svn help')"
  else
    svn st | grep '^\?' | awk '{print $2}' | xargs svn $*
  fi 
}

# Apply svn sub-command to every deleted file (marked with ! in 'svn status')
# Example : 
# 
# Delete every missing file from repo
# > svn-alldeleted delete
# 
# Still works with extra parameters
# > svn-alldeleted delete --force
function svn-alldeleted {
  if [ -z $1 ]; then
    echo "Please add an svn-subcommand as a parameter (try 'svn help')"
  else
    svn st | grep '^!' | awk '{print $2}' | xargs svn $*
  fi 
}
